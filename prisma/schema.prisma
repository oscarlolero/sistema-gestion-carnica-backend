generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           Int               @id @default(autoincrement())
  name         String
  description  String?
  sku          String?           @unique
  barcode      String?           @unique
  pricePerKg   Decimal?          @db.Decimal(10, 2)
  pricePerUnit Decimal?          @db.Decimal(10, 2)
  isActive     Boolean           @default(true)
  baseUnitId   Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  baseUnit     Unit              @relation(fields: [baseUnitId], references: [id])
  categories   ProductCategory[]
  cuts         ProductCut[]
  ticketItems  TicketItem[]
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  products    ProductCategory[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model Unit {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  abbreviation     String    @unique
  conversionFactor Float?
  products         Product[]
}

model Cut {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  products    ProductCut[]
  ticketItems TicketItem[]
}

model ProductCut {
  id           Int      @id @default(autoincrement())
  productId    Int
  cutId        Int
  pricePerKg   Decimal? @db.Decimal(10, 2)
  pricePerUnit Decimal? @db.Decimal(10, 2)
  cut          Cut      @relation(fields: [cutId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Ticket {
  id          Int          @id @default(autoincrement())
  date        DateTime     @default(now())
  total       Decimal      @db.Decimal(10, 2)
  paymentType String
  userId      Int?
  printed     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt @default(now())
  user        User?        @relation(fields: [userId], references: [id])
  items       TicketItem[]
}

model TicketItem {
  id        Int     @id @default(autoincrement())
  ticketId  Int
  productId Int
  cutId     Int?
  quantity  Decimal @db.Decimal(10, 2)
  unitPrice Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)
  cut       Cut?    @relation(fields: [cutId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  ticket    Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String?  @unique
  role     String?
  isActive Boolean  @default(true)
  tickets  Ticket[]
}
